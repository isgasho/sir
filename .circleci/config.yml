# Golang CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-go/ for more details
# tags DOCS: https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
version: 2
jobs:
  build:
    docker:
        - image: ubuntu:18.04
    working_directory: ~/stuff/notgopath/sir
    steps:
        - checkout
        - run:
            name: install apt and pip deps
            command: |
                pwd; ls -lsha
                apt-get -y update
                apt -y install \
                            curl \
                            wget \
                            git \
                            nano \
                            apt-transport-https \
                            ca-certificates

        - run:
            name: install golang
            command: |
                VER="go1.11"
                wget --directory-prefix=/usr/local https://dl.google.com/go/$VER.linux-amd64.tar.gz
                tar -C /usr/local -xzf /usr/local/$VER.linux-amd64.tar.gz
                export PATH=$PATH:/usr/local/go/bin
                echo "export PATH=$PATH:/usr/local/go/bin" >> /etc/profile
                mkdir -p ~/go/bin
                echo "export PATH=$PATH:~/go/bin" >> /etc/profile
                echo "export LC_ALL=C.UTF-8" >> /etc/profile
                echo "export LANG=C.UTF-8" >> /etc/profile
                echo "export GO111MODULE=on" >> /etc/profile
                source /etc/profile

        - run:
            name: install tools
            command: |
                source /etc/profile
                GOBIN_VERSION=v0.0.4
                wget -nc --directory-prefix=/tmp https://github.com/myitcv/gobin/releases/download/$GOBIN_VERSION/linux-amd64
                mv /tmp/linux-amd64 /usr/local/bin/gobin
                chmod +x /usr/local/bin/gobin
                gobin honnef.co/go/tools/cmd/staticcheck@2019.1

        - run: source /etc/profile && go build --race -o sir cmd/main.go
        - run: ./sir -v
        - run: ./sir -up -d -f testdata/docker-compose.yml
        - run:
            name: echo number of running containers (expected=12), actual;
            command: |
                num_containers=$(docker ps -q | wc -l)
                echo "number of containers are; $num_containers"
                if [ "$num_containers" != "12" ]; then
                    echo "wanted 12 containers, got $num_containers" && exit 500
                fi
        - run:
            name: check that docker linking works
            command: |
                docker exec -it backup ping -w3 redis
                docker exec -it backup ping -w3 eminem.com
        - run:
            name: check that docker .env file works
            command: |
                CHECK_ENV_VAR=$(docker exec -it buildservice printenv | grep NAME_IN_ENV_FILE)
                echo "env var from .env file is; $CHECK_ENV_VAR"
                if [[ $CHECK_ENV_VAR != *"Mutabaruka"* ]]; then
                    echo "wanted env var NAME_IN_ENV_FILE=Mutabaruka, got $CHECK_ENV_VAR"
                fi
        # remove the containers running from the previous command
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run: cp sir testdata/ && cd testdata/ && ./sir -up -d
        - run:
            name: echo number of running containers (expected=12), actual;
            command: |
                num_containers=$(docker ps -q | wc -l)
                echo "number of containers are; $num_containers"
                if [ "$num_containers" != "12" ]; then
                    echo "wanted 12 containers, got $num_containers" && exit 500
                fi
        - run:
            name: check that docker linking works
            command: |
                docker exec -it backup ping -w3 redis
                docker exec -it backup ping -w3 eminem.com
        - run:
            name: check that docker .env file works
            command: |
                CHECK_ENV_VAR=$(docker exec -it buildservice printenv | grep NAME_IN_ENV_FILE)
                echo "env var from .env file is; $CHECK_ENV_VAR"
                if [[ $CHECK_ENV_VAR != *"Mutabaruka"* ]]; then
                    echo "wanted env var NAME_IN_ENV_FILE=Mutabaruka, got $CHECK_ENV_VAR"
                fi
        # test rebuild, stop (BUT DO NOT remove) containers from previous command
        # BUT because of this error; https://circleci.com/docs/1.0/docker-btrfs-error/
        # we cant do that on circleCI(though it works locally).
        # so until circleCI fixes(or we run circleCI in a vm instead of a container), we need to destroy
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run: ./sir -up -d -f testdata/docker-compose.yml -build
        - run:
            name: echo number of running containers (expected=12), actual;
            command: |
                all_containers=$(docker ps -aq | wc -l)
                running_containers=$(docker ps -q | wc -l)
                echo "number of all containers; $all_containers"
                echo "number of running containers are; $running_containers"
                if [ "$running_containers" != "12" ]; then
                    echo "wanted 12 containers, got $running_containers" && exit 500
                fi
        - run:
            name: go vet
            command: source /etc/profile && go vet -v -all -shadow ./...
        - run:
            name: staticcheck
            command: source /etc/profile && staticcheck -tests -show-ignored ./...
        - run:
            name: run tests
            command: source /etc/profile && go test -timeout 1m -race -cover -v ./...
        - run:
            name: run benchmarks
            command: source /etc/profile && go test -timeout 1m -race -run=XXXX -bench=. ./...
        - run:
            name: codecov
            command: |
                source /etc/profile && \
                go test -timeout 1m -v -race -cover -coverprofile=coverage.txt ./... && \
                bash <(curl -s https://codecov.io/bash)

        # benchmark against docker-compose
        - run: rm sir
        - run: source /etc/profile && go build -o sir cli/cli.go
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run:
            name: show docker-compose version
            command: docker-compose version
        - run:
            name: time docker-compose up
            command: time docker-compose -f testdata/docker-compose.yml up -d
        - run: docker ps -aq | xargs docker rm -f; docker image prune -fa; docker system prune -af
        - run:
            name: time sir -up
            command: time ./sir -up -d -f testdata/docker-compose.yml
        - run:
            name: check if changes have release notes 
            command: |
                if [ "$CIRCLE_BRANCH" == "master" ]; then
                    printf "\n $CIRCLE_BRANCH branch, ignoring check for relese notes \n"
                else
                    ChangedFiles=`git diff --name-only origin/master`
                    case "$ChangedFiles" in
                        *RELEASE_NOTES.*)
                            printf "\n Thanks, your commits include update to release notes. \n";;
                        *)
                            printf "\n You should add release notes to .github/RELEASE_NOTES.md \n" && exit 77;;
                    esac
                fi

  deploy:
    docker:
        - image: ubuntu:18.04
    working_directory: ~/stuff/notgopath/sir
    steps:
        - checkout
        - run:
            name: something
            command: |
                printf "do some deploy stuff"


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/