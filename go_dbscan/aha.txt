package main

import (
	"flag"
	"fmt"
	"image/color"
	"log"

	"github.com/pa-m/sklearn/cluster"
	// "github.com/pa-m/sklearn/datasets"
	// "github.com/pa-m/sklearn/preprocessing"
	"gonum.org/v1/gonum/mat"
	"gonum.org/v1/plot"
	"gonum.org/v1/plot/plotter"
	"gonum.org/v1/plot/vg"

	"gonum.org/v1/plot/vg/draw"

	"github.com/pkg/errors"

	"github.com/sanity-io/litter"
)

var visualDebug = flag.Bool("visual", false, "output images for benchmarks and test data")

func main() {
	*visualDebug = true
	// Save the plot to a PNG file.
	pngfile := "GolangExampleDBSCAN.png"

	// adapted from http://scikit-learn.org/stable/_downloads/plot_dbscan.ipynb
	// Generate sample data
	// centers := mat.NewDense(3, 2, []float64{1, 1, -1, -1, 1, -1})
	// NSamples := 750
	// X, _ := datasets.MakeBlobs(&datasets.MakeBlobsConfig{NSamples: NSamples, Centers: centers, ClusterStd: .3}) //RandomState: rand.New(rand.NewSource(0)),

	// X, _ = preprocessing.NewStandardScaler().FitTransform(X, nil)

	// np.array([[1], [2], [3], [7], [8], [80], [123]])

	// a = np.arr足ay([[0, 1, 2], [3, 4, 5]], dtype=足'fl足oat足64')
	// X = mat.NewDense(7, 1, []float64{ 1,2,3,7,8,80,123})

	// np.array([[1, 2], [2, 2], [2, 3], [8, 7], [8, 8], [25, 80]])

	// X := mat.NewDense(6, 2, []float64{1,2,2,2,2,3,8,7,8,8,25,80})

	z1 := []byte("komu")
	z2 := []byte("nomu")
	z3 := []byte("iomu")
	z4 := []byte("komr")
	z5 := []byte("komt")
	z6 := []byte("komx")
	z7 := []byte("komg")

	// X = np.array([z1, z2, z3, z4, z5, z6, z7])

	c := make([]float64, 0)
	for _, v := range z1 {
		c = append(c, float64(v))
	}
	for _, v := range z2 {
		c = append(c, float64(v))
	}
	for _, v := range z3 {
		c = append(c, float64(v))
	}
	for _, v := range z4 {
		c = append(c, float64(v))
	}
	for _, v := range z5 {
		c = append(c, float64(v))
	}
	for _, v := range z6 {
		c = append(c, float64(v))
	}
	for _, v := range z7 {
		c = append(c, float64(v))
	}

	X := mat.NewDense(7, 4, c)
	litter.Dump(c)
	litter.Dump(len(c))

	db := cluster.NewDBSCAN(&cluster.DBSCANConfig{Eps: 3, MinSamples: 2, Algorithm: ""})
	db.Fit(X, nil)
	coreSampleMask := make([]bool, len(db.Labels))
	for sample := range db.CoreSampleIndices {
		coreSampleMask[sample] = true
	}
	labels := db.Labels
	labelsmap := make(map[int]int)
	for _, l := range labels {
		labelsmap[l] = l
	}
	nclusters := len(labelsmap)
	if _, ok := labelsmap[-1]; ok {
		nclusters--
	}
	fmt.Printf("Estimated number of clusters: %d\n", nclusters)

	NSamples := 7

	if *visualDebug {
		// plot result
		p, err := plot.New()
		if err != nil {
			err = errors.Wrap(err, "error instantiating plot")
			log.Fatalf("\n%+v", err)
		}
		p.Title.Text = fmt.Sprintf("Estimated number of clusters: %d", nclusters)
		for cl := range labelsmap {
			var data plotter.XYs
			for sample := 0; sample < NSamples; sample++ {
				if labels[sample] == cl {
					data = append(data, struct{ X, Y float64 }{X.At(sample, 0), X.At(sample, 1)})
				}
			}
			s, err := plotter.NewScatter(data)
			if err != nil {
				err = errors.Wrap(err, "error instantiating plotter.NewScatter")
				log.Fatalf("\n%+v", err)
			}
			var color0 color.RGBA
			switch cl {
			case -1:
				color0 = color.RGBA{0, 0, 0, 255}
			case 0:
				color0 = color.RGBA{176, 0, 0, 255}
			case 1:
				color0 = color.RGBA{0, 176, 0, 255}
			case 2:
				color0 = color.RGBA{0, 0, 176, 255}
			}
			s.GlyphStyle.Color = color0
			s.GlyphStyle.Shape = draw.CircleGlyph{}
			p.Add(s)
			// p.Legend.Add(fmt.Sprintf("scatter %d", cl), s)

		}

		if err := p.Save(6*vg.Inch, 4*vg.Inch, pngfile); err != nil {
			err = errors.Wrap(err, "error saving png")
			log.Fatalf("\n%+v", err)
		}

	}
}
